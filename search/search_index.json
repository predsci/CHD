{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Coronal Hole Detection Project For Python files visit the CHD Git repository . Project Outline Data Collection Image Pre-Processing: PSF Deconvolution Limb-Brightening Correction Inter-Instrument Transformation Coronal Hole Detection Mapping Project Pipeline Some sort of graphic here...","title":"Home"},{"location":"#welcome-to-the-coronal-hole-detection-project","text":"For Python files visit the CHD Git repository .","title":"Welcome to the Coronal Hole Detection Project"},{"location":"#project-outline","text":"Data Collection Image Pre-Processing: PSF Deconvolution Limb-Brightening Correction Inter-Instrument Transformation Coronal Hole Detection Mapping","title":"Project Outline"},{"location":"#project-pipeline","text":"Some sort of graphic here...","title":"Project Pipeline"},{"location":"about/","text":"About the Project Contact Cooper Downs: cdowns@predsci.com James Turtle: jturtle@predsci.com","title":"About the Project"},{"location":"about/#about-the-project","text":"","title":"About the Project"},{"location":"about/#contact","text":"Cooper Downs: cdowns@predsci.com James Turtle: jturtle@predsci.com","title":"Contact"},{"location":"db/db/","text":"Database Information The Image Pre-Processing Pipeline is built upon a database to store images, histograms, and fit parameter values. Updating the Database The original database is now quite different than the database needed to query and save calculated parameters. In order to generate the necessary updates to run the code, do the following: install the python package Alembic in your python environment conda install -c conda-forge alembic * additional installation information can be found here in the (CHD) project folder, run the script to update the database alembic upgrade head * this will run the latest updates to the database to return to the original database, run the downgrade script alembic downgrade base * this will return the database to it's original form to only run certain upgrades/downgrades * run a specific number of revisions (n is the number of revisions to either upgrade/downgrade) alembic upgrade +n alembic downgrade -n * run a specific upgrade/downgrade: scripts are found here alembic upgrade \"revision\" alembic downgrade \"revision\" * \"revision\" refers to the first 3+ identifying characters from the specific script Database Schema","title":"Database Basics"},{"location":"db/db/#database-information","text":"The Image Pre-Processing Pipeline is built upon a database to store images, histograms, and fit parameter values.","title":"Database Information"},{"location":"db/db/#updating-the-database","text":"The original database is now quite different than the database needed to query and save calculated parameters. In order to generate the necessary updates to run the code, do the following: install the python package Alembic in your python environment conda install -c conda-forge alembic * additional installation information can be found here in the (CHD) project folder, run the script to update the database alembic upgrade head * this will run the latest updates to the database to return to the original database, run the downgrade script alembic downgrade base * this will return the database to it's original form to only run certain upgrades/downgrades * run a specific number of revisions (n is the number of revisions to either upgrade/downgrade) alembic upgrade +n alembic downgrade -n * run a specific upgrade/downgrade: scripts are found here alembic upgrade \"revision\" alembic downgrade \"revision\" * \"revision\" refers to the first 3+ identifying characters from the specific script","title":"Updating the Database"},{"location":"db/db/#database-schema","text":"","title":"Database Schema"},{"location":"db/iit/","text":"Database for Inter-Instrument Transformation For the Inter-Instrument Transformation. The database is used to query EUV Images and LBC Fit Parameters to apply the correction. 1D Intensity Histograms are created and stored in the database. After calculation, fit parameters are stored in the database then queried to apply the IIT Correction. Tables Histogram This table stores histogram and information associated with IIT Histograms. The histograms are created in Step One of Inter-Instrument Transformation Correction. Columns: hist_id: auto-incremented integer id associated with the histogram (Primary Key, Integer) image_id: integer id associated with image (Foreign Key: EUV Images, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) date_obs: time of image observation (DateTime) wavelength: observation wavelength (Integer) n_mu_bins: number of mu bins (Integer) n_intensity_bins: number of intensity bins (Integer) lat_band: latitude band (Blob) mu_bin_edges: array of mu bin edges from number of mu bins (Blob) intensity_bin_edges: array of intensity bin edges from number of intensity bins (Blob) hist: histogram associated with image (Blob) Image Combos This table stores information regarding the combination of images used to calculate the fit parameter. Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Integer) n_images: number of images in combination (Integer) date_mean: mean date of images in image combination (DateTime) date_max: maximum date of images in image combination (DateTime) date_min: minimum date of images in image combination (DateTime) Image Combo Assoc This table stores specific image ids with the associated combo id. Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Foreign Key: Image Combos, Integer) image_id: integer id associated with image (Primary Key, Foreign Key: EUV Images, Integer) Meth Defs This table stores information about a correction method and an associated integer method id. Columns: meth_id: auto-incremented integer id associated with the specific method (Primary Key, Integer) meth_name: method name (String) meth_description: description of method (String) Var Defs This table stores information about a variable and an associated integer variable id. Columns: var_id: auto-incremented integer id associated with the specific variable (Primary Key, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) var_name: variable name (String) var_description: description of variable (String) Var Vals This table stores variable values with the associated variable, method, and image combination. These values are calculated from the IIT fit analysis ( IIT Step Two ). These values are queried during the application of the correction ( IIT Step Three ) and during the creation of histogram plots ( IIT Step Four ). Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Foreign Key: Image Combos, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) var_id: auto-incremented integer id associated with the specific variable (Primary Key, Foreign Key: Var Defs, Integer) var_val: variable value (Float)","title":"Database for IIT"},{"location":"db/iit/#database-for-inter-instrument-transformation","text":"For the Inter-Instrument Transformation. The database is used to query EUV Images and LBC Fit Parameters to apply the correction. 1D Intensity Histograms are created and stored in the database. After calculation, fit parameters are stored in the database then queried to apply the IIT Correction.","title":"Database for Inter-Instrument Transformation"},{"location":"db/iit/#tables","text":"","title":"Tables"},{"location":"db/iit/#histogram","text":"This table stores histogram and information associated with IIT Histograms. The histograms are created in Step One of Inter-Instrument Transformation Correction. Columns: hist_id: auto-incremented integer id associated with the histogram (Primary Key, Integer) image_id: integer id associated with image (Foreign Key: EUV Images, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) date_obs: time of image observation (DateTime) wavelength: observation wavelength (Integer) n_mu_bins: number of mu bins (Integer) n_intensity_bins: number of intensity bins (Integer) lat_band: latitude band (Blob) mu_bin_edges: array of mu bin edges from number of mu bins (Blob) intensity_bin_edges: array of intensity bin edges from number of intensity bins (Blob) hist: histogram associated with image (Blob)","title":"Histogram"},{"location":"db/iit/#image-combos","text":"This table stores information regarding the combination of images used to calculate the fit parameter. Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Integer) n_images: number of images in combination (Integer) date_mean: mean date of images in image combination (DateTime) date_max: maximum date of images in image combination (DateTime) date_min: minimum date of images in image combination (DateTime)","title":"Image Combos"},{"location":"db/iit/#image-combo-assoc","text":"This table stores specific image ids with the associated combo id. Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Foreign Key: Image Combos, Integer) image_id: integer id associated with image (Primary Key, Foreign Key: EUV Images, Integer)","title":"Image Combo Assoc"},{"location":"db/iit/#meth-defs","text":"This table stores information about a correction method and an associated integer method id. Columns: meth_id: auto-incremented integer id associated with the specific method (Primary Key, Integer) meth_name: method name (String) meth_description: description of method (String)","title":"Meth Defs"},{"location":"db/iit/#var-defs","text":"This table stores information about a variable and an associated integer variable id. Columns: var_id: auto-incremented integer id associated with the specific variable (Primary Key, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) var_name: variable name (String) var_description: description of variable (String)","title":"Var Defs"},{"location":"db/iit/#var-vals","text":"This table stores variable values with the associated variable, method, and image combination. These values are calculated from the IIT fit analysis ( IIT Step Two ). These values are queried during the application of the correction ( IIT Step Three ) and during the creation of histogram plots ( IIT Step Four ). Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Foreign Key: Image Combos, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) var_id: auto-incremented integer id associated with the specific variable (Primary Key, Foreign Key: Var Defs, Integer) var_val: variable value (Float)","title":"Var Vals"},{"location":"db/lbc/","text":"Database for Limb-Brightening Correction For the Limb-Brightening Correction, the database is used to query for images, store histograms, and store fit parameter values. These fit parameter values can then be queried in order to apply the Limb-Brightening correction. Tables EUV Images This table stores files and information associated with EUV Images. Columns: image_id: auto-incremented integer id associated with the image (Primary Key, Integer) date_obs: time of image observation (DateTime) instrument: observation instrument (String) wavelength: observation wavelength (Integer) fname_raw: associated fits file (String) fname_hdf: associated hdf5 file (String) distance: associated distance (Float) cr_lon: Carrington Longitude (Float) cr_lat: Carrington Latitude (Float) cr_rot: Carrington Rotation (Float) flag: default 0 (Integer) time_of_download: time of image download to database (DateTime) Histogram This table stores histogram and information associated with LBC Histograms. The histograms are created in Step One of Limb Brightening. Columns: hist_id: auto-incremented integer id associated with the histogram (Primary Key, Integer) image_id: integer id associated with image (Foreign Key: EUV Images, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) date_obs: time of image observation (DateTime) wavelength: observation wavelength (Integer) n_mu_bins: number of mu bins (Integer) n_intensity_bins: number of intensity bins (Integer) lat_band: latitude band (Blob) mu_bin_edges: array of mu bin edges from number of mu bins (Blob) intensity_bin_edges: array of intensity bin edges from number of intensity bins (Blob) hist: histogram associated with image (Blob) Image Combos This table stores information regarding the combination of images used to calculate the fit parameter. Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Integer) n_images: number of images in combination (Integer) date_mean: mean date of images in image combination (DateTime) date_max: maximum date of images in image combination (DateTime) date_min: minimum date of images in image combination (DateTime) Image Combo Assoc This table stores specific image ids with the associated combo id. Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Foreign Key: Image Combos, Integer) image_id: integer id associated with image (Primary Key, Foreign Key: EUV Images, Integer) Meth Defs This table stores information about a correction method and an associated integer method id. Columns: meth_id: auto-incremented integer id associated with the specific method (Primary Key, Integer) meth_name: method name (String) meth_description: description of method (String) Var Defs This table stores information about a variable and an associated integer variable id. Columns: var_id: auto-incremented integer id associated with the specific variable (Primary Key, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) var_name: variable name (String) var_description: description of variable (String) Var Vals This table stores variable values with the associated variable, method, and image combination. These values are calculated from the theoretical fit analysis ( LBC Step Two ). These values are queried during the application of the correction ( LBC Step Three ) and during the creation of beta and y plots ( LBC Step Four ). Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Foreign Key: Image Combos, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) var_id: auto-incremented integer id associated with the specific variable (Primary Key, Foreign Key: Var Defs, Integer) var_val: variable value (Float)","title":"Database for LBC"},{"location":"db/lbc/#database-for-limb-brightening-correction","text":"For the Limb-Brightening Correction, the database is used to query for images, store histograms, and store fit parameter values. These fit parameter values can then be queried in order to apply the Limb-Brightening correction.","title":"Database for Limb-Brightening Correction"},{"location":"db/lbc/#tables","text":"","title":"Tables"},{"location":"db/lbc/#euv-images","text":"This table stores files and information associated with EUV Images. Columns: image_id: auto-incremented integer id associated with the image (Primary Key, Integer) date_obs: time of image observation (DateTime) instrument: observation instrument (String) wavelength: observation wavelength (Integer) fname_raw: associated fits file (String) fname_hdf: associated hdf5 file (String) distance: associated distance (Float) cr_lon: Carrington Longitude (Float) cr_lat: Carrington Latitude (Float) cr_rot: Carrington Rotation (Float) flag: default 0 (Integer) time_of_download: time of image download to database (DateTime)","title":"EUV Images"},{"location":"db/lbc/#histogram","text":"This table stores histogram and information associated with LBC Histograms. The histograms are created in Step One of Limb Brightening. Columns: hist_id: auto-incremented integer id associated with the histogram (Primary Key, Integer) image_id: integer id associated with image (Foreign Key: EUV Images, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) date_obs: time of image observation (DateTime) wavelength: observation wavelength (Integer) n_mu_bins: number of mu bins (Integer) n_intensity_bins: number of intensity bins (Integer) lat_band: latitude band (Blob) mu_bin_edges: array of mu bin edges from number of mu bins (Blob) intensity_bin_edges: array of intensity bin edges from number of intensity bins (Blob) hist: histogram associated with image (Blob)","title":"Histogram"},{"location":"db/lbc/#image-combos","text":"This table stores information regarding the combination of images used to calculate the fit parameter. Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Integer) n_images: number of images in combination (Integer) date_mean: mean date of images in image combination (DateTime) date_max: maximum date of images in image combination (DateTime) date_min: minimum date of images in image combination (DateTime)","title":"Image Combos"},{"location":"db/lbc/#image-combo-assoc","text":"This table stores specific image ids with the associated combo id. Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Foreign Key: Image Combos, Integer) image_id: integer id associated with image (Primary Key, Foreign Key: EUV Images, Integer)","title":"Image Combo Assoc"},{"location":"db/lbc/#meth-defs","text":"This table stores information about a correction method and an associated integer method id. Columns: meth_id: auto-incremented integer id associated with the specific method (Primary Key, Integer) meth_name: method name (String) meth_description: description of method (String)","title":"Meth Defs"},{"location":"db/lbc/#var-defs","text":"This table stores information about a variable and an associated integer variable id. Columns: var_id: auto-incremented integer id associated with the specific variable (Primary Key, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) var_name: variable name (String) var_description: description of variable (String)","title":"Var Defs"},{"location":"db/lbc/#var-vals","text":"This table stores variable values with the associated variable, method, and image combination. These values are calculated from the theoretical fit analysis ( LBC Step Two ). These values are queried during the application of the correction ( LBC Step Three ) and during the creation of beta and y plots ( LBC Step Four ). Columns: combo_id: auto-incremented integer id associated with that specific combination of images (Primary Key, Foreign Key: Image Combos, Integer) meth_id: auto-incremented integer id associated with the specific method (Foreign Key: Meth Defs, Integer) var_id: auto-incremented integer id associated with the specific variable (Primary Key, Foreign Key: Var Defs, Integer) var_val: variable value (Float)","title":"Var Vals"},{"location":"ipp/iit/","text":"Inter-Instrument Transformation The goal of the inter-instrument correction is to equate the intensities from one instrument to the intensities of another. The choice of which instrument to use as the \"reference instrument\" is an updatable parameter. Example Images and Histograms Analysis Pipeline Compute Histograms and Save to Database This function applies the limb-brightening correction, calculates the associated IIT histogram, and saves these histograms to the database. The generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def create_histograms(db_session, inst_list, lbc_query_time_min, lbc_query_time_max, hdf_data_dir, n_mu_bins=18, n_intensity_bins=200, lat_band=[-np.pi / 64., np.pi / 64.], log10=True, R0=1.01): \"\"\" function to apply LBC, create and save histograms to the database \"\"\" image_pd = db_funcs.query_euv_images(db_session=db_session, time_min=lbc_query_time_min, time_max=lbc_query_time_max, instrument=query_instrument) lbcc_data = apply_lbc_correction(db_session, hdf_data_dir, instrument, image_row=row, n_mu_bins=n_mu_bins, n_intensity_bins=n_intensity_bins, R0=R0) hist = psi_d_types.LBCCImage.iit_hist(lbcc_data, lat_band, log10) iit_hist = psi_d_types.create_iit_hist(lbcc_data, method_id[1], intensity_bin_edges, lat_band, hist) db_funcs.add_hist(db_session, iit_hist) 1.) db_funcs.query_euv_images queries database for images (from EUV_Images table) in specified date range 2.) apply_lbc_correction applies Limb-Brightening Correction to images and creates LBCCImage datatype 3.) psi_d_types.LBCCImage.iit_hist calculates IIT histogram from LBC corrected data 4.) psi_d_types.create_iit_hist creates IIT histogram datatype 5.) db_funcs.add_hist saves histograms to database (table Histogram) associating an image_id, meth_id, and basic information with histogram Calculate and Save Correction Coefficients This function queries the database for IIT histograms, calculates correction coefficients, and saves them to the database. The generalized function can be found here . Apply Inter-Instrument Transformation and Plot New Images This function queries the database for IIT coefficients, applies the correction, and plots resulting images. The generalized function can be found here . Generate Histogram Plots This function generates histogram plots comparing data from before and after the IIT correction. The generalized function can be found here .","title":"Inter-Instrument Transformation"},{"location":"ipp/iit/#inter-instrument-transformation","text":"The goal of the inter-instrument correction is to equate the intensities from one instrument to the intensities of another. The choice of which instrument to use as the \"reference instrument\" is an updatable parameter.","title":"Inter-Instrument Transformation"},{"location":"ipp/iit/#example-images-and-histograms","text":"","title":"Example Images and Histograms"},{"location":"ipp/iit/#analysis-pipeline","text":"","title":"Analysis Pipeline"},{"location":"ipp/iit/#compute-histograms-and-save-to-database","text":"This function applies the limb-brightening correction, calculates the associated IIT histogram, and saves these histograms to the database. The generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def create_histograms(db_session, inst_list, lbc_query_time_min, lbc_query_time_max, hdf_data_dir, n_mu_bins=18, n_intensity_bins=200, lat_band=[-np.pi / 64., np.pi / 64.], log10=True, R0=1.01): \"\"\" function to apply LBC, create and save histograms to the database \"\"\" image_pd = db_funcs.query_euv_images(db_session=db_session, time_min=lbc_query_time_min, time_max=lbc_query_time_max, instrument=query_instrument) lbcc_data = apply_lbc_correction(db_session, hdf_data_dir, instrument, image_row=row, n_mu_bins=n_mu_bins, n_intensity_bins=n_intensity_bins, R0=R0) hist = psi_d_types.LBCCImage.iit_hist(lbcc_data, lat_band, log10) iit_hist = psi_d_types.create_iit_hist(lbcc_data, method_id[1], intensity_bin_edges, lat_band, hist) db_funcs.add_hist(db_session, iit_hist) 1.) db_funcs.query_euv_images queries database for images (from EUV_Images table) in specified date range 2.) apply_lbc_correction applies Limb-Brightening Correction to images and creates LBCCImage datatype 3.) psi_d_types.LBCCImage.iit_hist calculates IIT histogram from LBC corrected data 4.) psi_d_types.create_iit_hist creates IIT histogram datatype 5.) db_funcs.add_hist saves histograms to database (table Histogram) associating an image_id, meth_id, and basic information with histogram","title":"Compute Histograms and Save to Database"},{"location":"ipp/iit/#calculate-and-save-correction-coefficients","text":"This function queries the database for IIT histograms, calculates correction coefficients, and saves them to the database. The generalized function can be found here .","title":"Calculate and Save Correction Coefficients"},{"location":"ipp/iit/#apply-inter-instrument-transformation-and-plot-new-images","text":"This function queries the database for IIT coefficients, applies the correction, and plots resulting images. The generalized function can be found here .","title":"Apply Inter-Instrument Transformation and Plot New Images"},{"location":"ipp/iit/#generate-histogram-plots","text":"This function generates histogram plots comparing data from before and after the IIT correction. The generalized function can be found here .","title":"Generate Histogram Plots"},{"location":"ipp/lbc/","text":"Limb-Brightening Correction Limb Brightening Correction (LBC) is the second step in the data pre-processing pipeline. The goal of LBC is to correct for brightening of structures that is dependent upon their distance from disk center. Examples of Corrected Images AIA Images Original AIA Image Corrected AIA Image EUVI-A Images Original STA Image Corrected STA Image EUVI-B Images Original STB Image Corrected STB Image Theoretical Analysis Pipeline Compute Histograms and Save to Database This function computes 2D Histograms from processed images for use in the LBC process. It then saves these computed histograms to the database. The source code for this is found in the CHD GitHub and the generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 11 def save_histograms(db_session, hdf_data_dir, inst_list, hist_query_time_min, hist_query_time_max, n_mu_bins=18, n_intensity_bins=200, lat_band=[-np.pi / 64., np.pi / 64.], log10=True, R0=1.01): \"\"\" function to create and save histograms to database \"\"\" query_pd = db_funcs.query_euv_images(db_session=db_session, time_min=hist_query_time_min, time_max=hist_query_time_max, instrument=query_instrument) temp_hist = los_temp.mu_hist(image_intensity_bin_edges, mu_bin_edges, lat_band=lat_band, log10=log10) hist_lbcc = psi_d_types.create_lbcc_hist(hdf_path, row.image_id, method_id[1], mu_bin_edges, image_intensity_bin_edges, lat_band, temp_hist) db_funcs.add_hist(hist_lbcc, db_session) 1.) db_funcs.query_euv_images queries database for images (from EUV_Images table) in specified date range 2.) los_temp.mu_hist creates histogram based on number of mu and intensity bins 3.) psi_d_types.create_hist converts histogram to lbcc_hist datatype 4.) db_funcs.add_hist saves histograms to database (table Histogram) associating an image_id, meth_id, and basic information with histogram Calculate and Save Theoretical Fit Parameters This function queries histograms from the database then calculates LBC fit parameters which are then saved in the database. The source code for this is found in the CHD GitHub and the generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def calc_theoretic_fit(db_session, inst_list, calc_query_time_min, calc_query_time_max, weekday=0, number_of_days=180, n_mu_bins=18, n_intensity_bins=200, lat_band=[-np.pi / 64., np.pi / 64.], create=False): \"\"\" function to calculate and save (to database) theoretic LBC fit parameters \"\"\" pd_hist = db_funcs.query_hist(db_session=db_session, meth_id=method_id[1], n_mu_bins=n_mu_bins, n_intensity_bins=n_intensity_bins, lat_band=np.array(lat_band).tobytes(), time_min=np.datetime64(min_date).astype(datetime.datetime), time_max=np.datetime64(max_date).astype(datetime.datetime), instrument=query_instrument) optim_out_theo = optim.minimize(lbcc.get_functional_sse, init_pars, args=(hist_ref, hist_mat, mu_vec, intensity_bin_array, model), method=\"BFGS\") db_funcs.store_lbcc_values(db_session, pd_hist, meth_name, meth_desc, var_name, var_desc, date_index, inst_index, optim_vals=optim_vals_theo[0:6], results=results_theo, create=True) 1.) db_funcs.query_hist queries database for histograms (from Histogram table) in specified date range 2.) optim.minimize use theoretical optimization method to calculate fit parameters 3.) db_funcs.store_lbcc_values save the six fit parameters to database using function store_lbcc_values from modules/DB_funs creates image combination combo_id of image_ids and dates in Images_Combos table creates association between each image_id and combo_id in Image_Combo_Assoc table creates new method \u201cLBCC Theoretic\u201d with an associated meth_id in Meth_Defs table creates new variable definitions \u201cTheoVar\u201d + index with an associated var_id in Var_Defs table store variable value as float in Var_Vals table with associated combo_id, meth_id, and var_id Apply Limb-Brightening Correction and Plot Corrected Images This function queries the database for LBC fit parameters then applies them to specified images, plotting resulting images before and after the correction. The source code for this is found in the CHD GitHub and the generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def apply_lbc_correction ( db_session , hdf_data_dir , inst_list , lbc_query_time_min , lbc_query_time_max , n_intensity_bins = 200 , R0 = 1 . 01 , plot = False ): \"\"\" function to apply limb-brightening correction and plot images within a certain time frame \"\"\" image_pd = db_funcs . query_euv_images ( db_session = db_session , time_min = lbc_query_time_min , time_max = lbc_query_time_max , instrument = query_instrument ) theoretic_query = db_funcs . query_var_val ( db_session , meth_name , date_obs = original_los . info [ 'date_string' ], instrument = instrument ) beta , y = lbcc . get_beta_y_theoretic_continuous ( theoretic_query , mu_array = original_los . mu ) corrected_los_data = beta * original_los . data + y if plot : Plotting . PlotImage ( original_los , nfig = 100 + inst_index , title = \"Original LOS Image for \" + instrument ) Plotting . PlotLBCCImage ( lbcc_data = corrected_los_data , los_image = original_los , nfig = 200 + inst_index , title = \"Corrected LBCC Image for \" + instrument ) Plotting . PlotLBCCImage ( lbcc_data = original_los . data - corrected_los_data , los_image = original_los , nfig = 300 + inst_index , title = \"Difference Plot for \" + instrument ) 1.) db_funcs.query_euv_images queries database for images (from EUV_Images table) in specified date range 2.) db_funcs.query_var_val queries database for variable values associated with specific image (from Var_Vals table) 3.) lbcc.get_beta_y_theoretic_continuous calculates beta and y arrays uses variable values from query in step two uses mu array from original LOS image 4.) corrected_los_data = beta * original_los.data + y applies correction to image based off beta, y, and original data arrays 5.) Plotting.PlotImage and Plotting.PlotLBCCImage plots original and corrected images and difference between them Generate Plots of Beta and y This function queries the database for LBC fit parameters then generates plots of Beta and y over time. The source code for this is found in the CHD GitHub and the generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 def generate_theoretic_plots(db_session, inst_list, plot_query_time_min, plot_query_time_max, weekday, image_out_path, year='2011', time_period='6 Month', plot_week=0, n_mu_bins=18): \"\"\" function to generate plots of beta/y over time and beta/y v. mu \"\"\" theoretic_query[date_index, :] = db_funcs.query_var_val(db_session, meth_name, date_obs=np.datetime64(center_date).astype(datetime.datetime), instrument=instrument) plot_beta[mu_index, date_index], plot_y[mu_index, date_index] = lbcc.get_beta_y_theoretic_based( theoretic_query[date_index, :], mu) beta_y_v_mu[index, :] = lbcc.get_beta_y_theoretic_based(theoretic_query[plot_week, :], mu) 1.) db_funcs.query_var_val query fit parameters from database 2.) lbcc.get_beta_y_theoretic_based(theoretic_query[date_index, :], mu) calculate beta and y correction coefficients over time using theoretic fit parameters and mu values used for plotting beta and y over time 3.) lbcc.get_beta_y_theoretic_based(theoretic_query[plot_week, :], mu) calculate beta and y correction coefficients for a specific week using theoretic fit parameters and mu values used for plotting beta and y v. mu for a specific week","title":"Limb-Brightening Correction"},{"location":"ipp/lbc/#limb-brightening-correction","text":"Limb Brightening Correction (LBC) is the second step in the data pre-processing pipeline. The goal of LBC is to correct for brightening of structures that is dependent upon their distance from disk center.","title":"Limb-Brightening Correction"},{"location":"ipp/lbc/#examples-of-corrected-images","text":"","title":"Examples of Corrected Images"},{"location":"ipp/lbc/#aia-images","text":"Original AIA Image Corrected AIA Image","title":"AIA Images"},{"location":"ipp/lbc/#euvi-a-images","text":"Original STA Image Corrected STA Image","title":"EUVI-A Images"},{"location":"ipp/lbc/#euvi-b-images","text":"Original STB Image Corrected STB Image","title":"EUVI-B Images"},{"location":"ipp/lbc/#theoretical-analysis-pipeline","text":"","title":"Theoretical Analysis Pipeline"},{"location":"ipp/lbc/#compute-histograms-and-save-to-database","text":"This function computes 2D Histograms from processed images for use in the LBC process. It then saves these computed histograms to the database. The source code for this is found in the CHD GitHub and the generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 11 def save_histograms(db_session, hdf_data_dir, inst_list, hist_query_time_min, hist_query_time_max, n_mu_bins=18, n_intensity_bins=200, lat_band=[-np.pi / 64., np.pi / 64.], log10=True, R0=1.01): \"\"\" function to create and save histograms to database \"\"\" query_pd = db_funcs.query_euv_images(db_session=db_session, time_min=hist_query_time_min, time_max=hist_query_time_max, instrument=query_instrument) temp_hist = los_temp.mu_hist(image_intensity_bin_edges, mu_bin_edges, lat_band=lat_band, log10=log10) hist_lbcc = psi_d_types.create_lbcc_hist(hdf_path, row.image_id, method_id[1], mu_bin_edges, image_intensity_bin_edges, lat_band, temp_hist) db_funcs.add_hist(hist_lbcc, db_session) 1.) db_funcs.query_euv_images queries database for images (from EUV_Images table) in specified date range 2.) los_temp.mu_hist creates histogram based on number of mu and intensity bins 3.) psi_d_types.create_hist converts histogram to lbcc_hist datatype 4.) db_funcs.add_hist saves histograms to database (table Histogram) associating an image_id, meth_id, and basic information with histogram","title":"Compute Histograms and Save to Database"},{"location":"ipp/lbc/#calculate-and-save-theoretical-fit-parameters","text":"This function queries histograms from the database then calculates LBC fit parameters which are then saved in the database. The source code for this is found in the CHD GitHub and the generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def calc_theoretic_fit(db_session, inst_list, calc_query_time_min, calc_query_time_max, weekday=0, number_of_days=180, n_mu_bins=18, n_intensity_bins=200, lat_band=[-np.pi / 64., np.pi / 64.], create=False): \"\"\" function to calculate and save (to database) theoretic LBC fit parameters \"\"\" pd_hist = db_funcs.query_hist(db_session=db_session, meth_id=method_id[1], n_mu_bins=n_mu_bins, n_intensity_bins=n_intensity_bins, lat_band=np.array(lat_band).tobytes(), time_min=np.datetime64(min_date).astype(datetime.datetime), time_max=np.datetime64(max_date).astype(datetime.datetime), instrument=query_instrument) optim_out_theo = optim.minimize(lbcc.get_functional_sse, init_pars, args=(hist_ref, hist_mat, mu_vec, intensity_bin_array, model), method=\"BFGS\") db_funcs.store_lbcc_values(db_session, pd_hist, meth_name, meth_desc, var_name, var_desc, date_index, inst_index, optim_vals=optim_vals_theo[0:6], results=results_theo, create=True) 1.) db_funcs.query_hist queries database for histograms (from Histogram table) in specified date range 2.) optim.minimize use theoretical optimization method to calculate fit parameters 3.) db_funcs.store_lbcc_values save the six fit parameters to database using function store_lbcc_values from modules/DB_funs creates image combination combo_id of image_ids and dates in Images_Combos table creates association between each image_id and combo_id in Image_Combo_Assoc table creates new method \u201cLBCC Theoretic\u201d with an associated meth_id in Meth_Defs table creates new variable definitions \u201cTheoVar\u201d + index with an associated var_id in Var_Defs table store variable value as float in Var_Vals table with associated combo_id, meth_id, and var_id","title":"Calculate and Save Theoretical Fit Parameters"},{"location":"ipp/lbc/#apply-limb-brightening-correction-and-plot-corrected-images","text":"This function queries the database for LBC fit parameters then applies them to specified images, plotting resulting images before and after the correction. The source code for this is found in the CHD GitHub and the generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def apply_lbc_correction ( db_session , hdf_data_dir , inst_list , lbc_query_time_min , lbc_query_time_max , n_intensity_bins = 200 , R0 = 1 . 01 , plot = False ): \"\"\" function to apply limb-brightening correction and plot images within a certain time frame \"\"\" image_pd = db_funcs . query_euv_images ( db_session = db_session , time_min = lbc_query_time_min , time_max = lbc_query_time_max , instrument = query_instrument ) theoretic_query = db_funcs . query_var_val ( db_session , meth_name , date_obs = original_los . info [ 'date_string' ], instrument = instrument ) beta , y = lbcc . get_beta_y_theoretic_continuous ( theoretic_query , mu_array = original_los . mu ) corrected_los_data = beta * original_los . data + y if plot : Plotting . PlotImage ( original_los , nfig = 100 + inst_index , title = \"Original LOS Image for \" + instrument ) Plotting . PlotLBCCImage ( lbcc_data = corrected_los_data , los_image = original_los , nfig = 200 + inst_index , title = \"Corrected LBCC Image for \" + instrument ) Plotting . PlotLBCCImage ( lbcc_data = original_los . data - corrected_los_data , los_image = original_los , nfig = 300 + inst_index , title = \"Difference Plot for \" + instrument ) 1.) db_funcs.query_euv_images queries database for images (from EUV_Images table) in specified date range 2.) db_funcs.query_var_val queries database for variable values associated with specific image (from Var_Vals table) 3.) lbcc.get_beta_y_theoretic_continuous calculates beta and y arrays uses variable values from query in step two uses mu array from original LOS image 4.) corrected_los_data = beta * original_los.data + y applies correction to image based off beta, y, and original data arrays 5.) Plotting.PlotImage and Plotting.PlotLBCCImage plots original and corrected images and difference between them","title":"Apply Limb-Brightening Correction and Plot Corrected Images"},{"location":"ipp/lbc/#generate-plots-of-beta-and-y","text":"This function queries the database for LBC fit parameters then generates plots of Beta and y over time. The source code for this is found in the CHD GitHub and the generalized function can be found here . 1 2 3 4 5 6 7 8 9 10 def generate_theoretic_plots(db_session, inst_list, plot_query_time_min, plot_query_time_max, weekday, image_out_path, year='2011', time_period='6 Month', plot_week=0, n_mu_bins=18): \"\"\" function to generate plots of beta/y over time and beta/y v. mu \"\"\" theoretic_query[date_index, :] = db_funcs.query_var_val(db_session, meth_name, date_obs=np.datetime64(center_date).astype(datetime.datetime), instrument=instrument) plot_beta[mu_index, date_index], plot_y[mu_index, date_index] = lbcc.get_beta_y_theoretic_based( theoretic_query[date_index, :], mu) beta_y_v_mu[index, :] = lbcc.get_beta_y_theoretic_based(theoretic_query[plot_week, :], mu) 1.) db_funcs.query_var_val query fit parameters from database 2.) lbcc.get_beta_y_theoretic_based(theoretic_query[date_index, :], mu) calculate beta and y correction coefficients over time using theoretic fit parameters and mu values used for plotting beta and y over time 3.) lbcc.get_beta_y_theoretic_based(theoretic_query[plot_week, :], mu) calculate beta and y correction coefficients for a specific week using theoretic fit parameters and mu values used for plotting beta and y v. mu for a specific week","title":"Generate Plots of Beta and y"},{"location":"ipp/psf/","text":"PSF Deconvolution Page regarding PSF deconvolution.","title":"PSF Deconvolution"},{"location":"ipp/psf/#psf-deconvolution","text":"Page regarding PSF deconvolution.","title":"PSF Deconvolution"}]}